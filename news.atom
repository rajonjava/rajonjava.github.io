<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>http://agorava.org/</id>
  <title>Agorava</title>
  <updated>2014-01-09T13:58:28+01:00</updated>
  <link href="http://agorava.org/news.atom" rel="self" type="application/atom+xml" />
  <link href="http://agorava.org/" rel="alternate" type="text/html" />
  <entry>
    <id>http://agorava.org/news/2013/11/20/Agorava-0-7-0-released.html</id>
    <title>Agorava Core 0.7.0 released</title>
    <updated>2014-01-09T13:58:28+01:00</updated>
    <published>2013-11-20T00:00:00+00:00</published>
    <link href="http://agorava.org/news/2013/11/20/Agorava-0-7-0-released.html" rel="alternate" type="text/html" />
    <category term="CDI"></category>
    <category term="JSR330"></category>
    <category term="announce"></category>
    <summary>
      
      After 3 month of development, Agorava version 0.7.0 hit Maven Central today. It is from far the biggest evolution of the framework since its creation.
      Let&#8217;s see what&#8217;s new in this release
      
      
      API &amp; SPI stabilization
      
      
      Probably the most important point for Agorava future : the framework has now a clean API (API and implementation were a bit mixed and moving a lot prior to that)
      
      
      
      
      Introduction of new concepts
      
      
      This version brings new concepts and tools that ease and rationalize OAuth interaction
      
      
      OAuthLifeCycleService : a single entry point to manage "OAuth Dance"
      
      OAuth initialization steps (the famous OAuth Dance) are now gathered in a single service...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;After 3 month of development, Agorava version 0.7.0 hit &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cagorava:&quot;&gt;Maven Central&lt;/a&gt; today. It is from far the biggest evolution of the framework since its creation.
      Let’s see what’s new in this release&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_api_spi_stabilization&quot;&gt;API &amp;amp; SPI stabilization&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Probably the most important point for Agorava future : the framework has now a clean &lt;a href=&quot;http://agorava.org/doc/apidocs070&quot;&gt;API&lt;/a&gt; (API and implementation were a bit mixed and moving a lot prior to that)&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_introduction_of_new_concepts&quot;&gt;Introduction of new concepts&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This version brings new concepts and tools that ease and rationalize OAuth interaction&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_oauthlifecycleservice_a_single_entry_point_to_manage_oauth_dance&quot;&gt;OAuthLifeCycleService : a single entry point to manage &quot;OAuth Dance&quot;&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;OAuth initialization steps (the famous OAuth Dance) are now gathered in a single service bean : &lt;a href=&quot;http://agorava.org/doc/apidocs070/org/agorava/api/service/OAuthLifeCycleService.html&quot;&gt;&lt;code&gt;OAuthLifeCycleService&lt;/code&gt;&lt;/a&gt;.
      The &lt;code&gt;startDanceFor()&lt;/code&gt; and &lt;code&gt;endDance()&lt;/code&gt; methods ease the OAuth 1.0a and 2.0 initialization life cycle.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_repositories_to_store_oauthsessions&quot;&gt;Repositories to store OAuthSessions&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This version introduces &lt;a href=&quot;http://agorava.org/doc/apidocs070/org/agorava/api/storage/UserSessionRepository.html&quot;&gt;&lt;code&gt;UserSessionRepository&lt;/code&gt;&lt;/a&gt; which allows to handle and contain a collection of OAuthSession (connection to OAuth provider).
      A main repository bean &lt;a href=&quot;http://agorava.org/doc/apidocs070/org/agorava/api/storage/GlobalRepository.html&quot;&gt;&lt;code&gt;GlobalRepository&lt;/code&gt;&lt;/a&gt; stored in CDI &lt;code&gt;@ApplicationScoped&lt;/code&gt; contains all &lt;code&gt;UserSessionRepository&lt;/code&gt; and is a convenient way to retrieve all OAuthSession on the server side for batch processing for instance.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_usersessionrepositoryresolver_and_sessionresolver&quot;&gt;UserSessionRepositoryResolver and SessionResolver&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Depending on your use case &lt;code&gt;UserSessionRepository&lt;/code&gt; (and their contained &lt;code&gt;OAuthSession&lt;/code&gt;) can be store in different way. Thanks to &lt;code&gt;UserSessionRepositoryResolver&lt;/code&gt; and &lt;code&gt;SessionResolver&lt;/code&gt; you can define different way of storing and resolving repositories and session. Agora provide the following built-in resolver than can be activated in &lt;code&gt;Agorava.properties&lt;/code&gt; configuration file. These built-in resolver are :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;session&lt;/strong&gt; : the &lt;code&gt;UserSessionRepository&lt;/code&gt; is stored in Http Session (&lt;code&gt;@SessionScoped&lt;/code&gt;) it was the Agorava behavior before version 0.7.x&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;request&lt;/strong&gt; : the &lt;code&gt;UserSessionRepository&lt;/code&gt; is provided for the current Http Request (&lt;code&gt;@RequestScoped&lt;/code&gt;) but you have to propagate the &lt;code&gt;repoid&lt;/code&gt; url parameter with &lt;code&gt;UserSessionRepository.getId()&lt;/code&gt; value to retrieve the repo at each request&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;cookie&lt;/strong&gt; : the &lt;code&gt;UserSessionRepository&lt;/code&gt; is provided for the current Http Request (&lt;code&gt;@RequestScoped&lt;/code&gt;), a cookie is used on user browser to keep the track of her &lt;code&gt;UserSessionRepository&lt;/code&gt;. You can specify the lifetime of the cookie int he config&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;application&lt;/strong&gt; : the &lt;code&gt;UserSessionRepository&lt;/code&gt; is provided for all the application time (&lt;code&gt;@ApplicationScoped&lt;/code&gt;). Not suitable for a multi-user scenario but rather for desktop scenario or a web app providing a shared access to a unique Social Network&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_reducing_framework_dependencies&quot;&gt;Reducing framework dependencies&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This Agorava release reduced it’s dependencies to the minimum. The only dependecies are now :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Jackson library for JSon mapping&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Deltaspike for CDI helpers.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_ready_for_other_jsr_330_implementation&quot;&gt;Ready for other JSR 330 implementation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Agorava core is now ready to have a new implementation for another JSR 330 compliant framework like Dagger, Guice or Spring.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_want_to_give_a_try&quot;&gt;Want to give a try ?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;check our &lt;a href=&quot;http://agorava.org/doc/getting-started&quot;&gt;Getting Started guide&lt;/a&gt; and give us your feedback.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_want_to_contribute&quot;&gt;Want to contribute ?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We really need contribution on core, doc, existing modules or new modules. So don’t hesitate to join us :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;IRC (#Agorava),&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Twitter &lt;a href=&quot;http://twitter.com/agoravaproj&quot;&gt;@Agoravaproj&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;User Group: &lt;a href=&quot;http://groups.google.com/group/agorava-dev&quot;&gt;http://groups.google.com/group/agorava-dev&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/agorava&quot;&gt;https://github.com/agorava&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_agorava_0_7_0_release_notes&quot;&gt;Agorava 0.7.0 Release notes&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_bug&quot;&gt;Bug&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-48&quot;&gt;AGOVA-48&lt;/a&gt;] - Remove Weld
      Core dependency management from Weld-1.x profile&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-60&quot;&gt;AGOVA-60&lt;/a&gt;] - Test don’t pass
      for OWB&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-61&quot;&gt;AGOVA-61&lt;/a&gt;] - SessionProducer
      get activated when producerscope in not definied&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-62&quot;&gt;AGOVA-62&lt;/a&gt;] - Passivation
      error for GlobalRepositoryImpl on GF / Weld 2.0.4&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-63&quot;&gt;AGOVA-63&lt;/a&gt;] - When using Weld
      2.X on Wildfly 8 or Glassfish 4, looking for OAuthSession fails&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_enhancement&quot;&gt;Enhancement&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-38&quot;&gt;AGOVA-38&lt;/a&gt;] - Integrate Rest
      and OAuth engine in core&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-49&quot;&gt;AGOVA-49&lt;/a&gt;] - Remove BOM from
      parent&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-54&quot;&gt;AGOVA-54&lt;/a&gt;] - Adding support
      of Raw JSON / XML response&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-55&quot;&gt;AGOVA-55&lt;/a&gt;] - Upgrade Jackson
      to 2.X&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-56&quot;&gt;AGOVA-56&lt;/a&gt;] - Get rid of
      Guava&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-57&quot;&gt;AGOVA-57&lt;/a&gt;] - Get rid of
      Commons Codec&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-58&quot;&gt;AGOVA-58&lt;/a&gt;] - Gather testing
      profile in parent POM&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-59&quot;&gt;AGOVA-59&lt;/a&gt;] - Use
      RequestTuner to specialize request instead of creating specific
      OAuthService&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_feature_request&quot;&gt;Feature Request&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-40&quot;&gt;AGOVA-40&lt;/a&gt;] - OAuthSession
      production should be ready for all application type (not only Web with
      HttpSession)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-52&quot;&gt;AGOVA-52&lt;/a&gt;] - Support to
      programmatically control callback URL pr auth request&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-53&quot;&gt;AGOVA-53&lt;/a&gt;] - OAuthComplete
      Event is unstable as a User facing API&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_task&quot;&gt;Task&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-7&quot;&gt;AGOVA-7&lt;/a&gt;] - Create API and
      common IMPL for JSR 330 compliant framework&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://agorava.org/news/2013/08/07/Agorava-0-6-1-released.html</id>
    <title>Agorava Core 0.6.1 released</title>
    <updated>2014-01-09T13:58:28+01:00</updated>
    <published>2013-08-07T00:00:00+00:00</published>
    <link href="http://agorava.org/news/2013/08/07/Agorava-0-6-1-released.html" rel="alternate" type="text/html" />
    <category term="CDI"></category>
    <category term="Wildfly"></category>
    <summary>
      Agorava core version 0.6.1 just hit Maven Central today, it corrected some issues in 0.6.0 and added interesting features.
      Release notes
      
              Bug
      
      [AGOVA-33] &#8211;         NPE when no OAuthSession producer is found
      [AGOVA-34] &#8211;         Unserializable exception for OAuthSession on Wildfly 8.0
      
      
              Enhancement
      
      [AGOVA-35] &#8211;         Add Weld 2.0 Test profiles
      [AGOVA-39] &#8211;         Adopt JBoss Community code formating
      [AGOVA-45] &#8211;   ...
    </summary>
    <content type="html">
      &lt;p&gt;Agorava core version 0.6.1 just hit Maven Central today, it corrected some issues in 0.6.0 and added interesting features.&lt;/p&gt;
      &lt;h3&gt;Release notes&lt;/h3&gt;
      
      &lt;h4&gt;        Bug&lt;/h4&gt;
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-33&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-33&lt;/a&gt;] –         &lt;span class=&quot;caps&quot;&gt;NPE&lt;/span&gt; when no OAuthSession producer is found&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-34&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-34&lt;/a&gt;] –         Unserializable exception for OAuthSession on Wildfly 8.0&lt;/li&gt;
      &lt;/ul&gt;
      
      &lt;h4&gt;        Enhancement&lt;/h4&gt;
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-35&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-35&lt;/a&gt;] –         Add Weld 2.0 Test profiles&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-39&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-39&lt;/a&gt;] –         Adopt JBoss Community code formating&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-45&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-45&lt;/a&gt;] –         Switch to a &lt;span class=&quot;caps&quot;&gt;BOM&lt;/span&gt; model&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-46&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-46&lt;/a&gt;] –         Officially switch to git flow maven plugin for release&lt;/li&gt;
      &lt;/ul&gt;
      
      &lt;h4&gt;        Feature Request&lt;/h4&gt;
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-36&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-36&lt;/a&gt;] –         No more resetConnection() in 0.6.0&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-37&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-37&lt;/a&gt;] –         Add a Servlet to manage callback in OAuth Dance&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;What does it mean in plain english? Let’s see.&lt;/p&gt;
      &lt;h3&gt;
      &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; 1.1 and Weld 2.x support&lt;/h3&gt;
      &lt;p&gt;A big thanks to Aslak Knustsen on this point. He added profiles to launch test with Weld 2.x and correxted some issue with Agorava &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; extension preventing it to run under &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; 1.1.&lt;br&gt;
      Agorava now support OpenWebBeans 1.1.7 and Weld from 1.1.5 to 2.0.2. We’ll continue to extends &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; support in next release especially with OpenWebBeans 2.x when it’ll be ready.&lt;/p&gt;
      &lt;h3&gt;Servlet to manage callback in OAuth initialization&lt;/h3&gt;
      &lt;p&gt;An old feature request was achieved in this release the &lt;a href=&quot;https://github.com/agorava/agorava-core/blob/0.6.1/agorava-core-impl-cdi/src/main/java/org/agorava/core/cdi/web/OAuthCallBackCdiServlet.java&quot;&gt;callback servlet&lt;/a&gt; that deal with the end of OAuth initialization process. Its default behavior is to close the current window (working for a popup) but you can easily override it to add your behavior.&lt;/p&gt;
      &lt;h3&gt;Dependency Management with maven &lt;span class=&quot;caps&quot;&gt;BOM&lt;/span&gt;
      &lt;/h3&gt;
      &lt;p&gt;Dependencies are now managed by a Maven Bill Of Material, it will allow Agorava users to integrate Agorava dependencies more easily than with a parent pom. You’ll just have to add this to the `dependencyManagement` section of your project :&lt;/p&gt;
      &lt;pre&gt;
          &amp;lt;dependencyManagement&amp;gt;
              &amp;lt;dependencies&amp;gt;
                  &amp;lt;dependency&amp;gt;
                      &amp;lt;groupId&amp;gt;org.agorava&amp;lt;/groupId&amp;gt;
                      &amp;lt;artifactId&amp;gt;agorava-bom&amp;lt;/artifactId&amp;gt;
                      &amp;lt;version&amp;gt;0.6.1&amp;lt;/version&amp;gt;
                      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
                      &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
                  &amp;lt;/dependency&amp;gt;
              &amp;lt;/dependencies&amp;gt;
          &amp;lt;/dependencyManagement&amp;gt; &lt;/pre&gt;
      &lt;h3&gt;thanks&lt;/h3&gt;
      &lt;p&gt;Again, many thanks to Aslak Knutsen for his help and to George Gastaldi for his feedback and work on PicketLink integration.&lt;/p&gt;
      &lt;h3&gt;What’s next ?&lt;/h3&gt;
      &lt;p&gt;Version 0.7.0 has started (for real this time), we’re going to integrate our own OAuth engine to prepare migration to OAuth client framework and add support to Apache Camel to provide better integration solution (especially for Social Media providing Streaming &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;).&lt;br&gt;
      In the meantime go for :&lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.agorava&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;agorava-core-impl-cdi&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.6.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/pre&gt;
      &lt;p&gt;check our &lt;a href=&quot;http://agorava.org/doc/getting-started&quot;&gt;Getting Started guide&lt;/a&gt; and give us your feedback&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://agorava.org/news/2013/07/13/Agorava-0-6-0-released.html</id>
    <title>Agorava Core 0.6.0 released</title>
    <updated>2014-01-09T13:58:28+01:00</updated>
    <published>2013-07-13T00:00:00+00:00</published>
    <link href="http://agorava.org/news/2013/07/13/Agorava-0-6-0-released.html" rel="alternate" type="text/html" />
    <category term="CDI"></category>
    <category term="OpenWebBeans"></category>
    <category term="OAuth"></category>
    <summary>
      Agorava core version 0.6.0 just hit Maven Central, even if the release notes are quite short, there are a lot of big improvement in this release.
      Release notes
      First things first, here are the release notes.
              Bug
      
      [AGOVA-29] &#8211;         Tests fail with OpenWebBeans
      
      
              Enhancement
      
      [AGOVA-23] &#8211;         Get Rid of JBoss Logging
      [AGOVA-30] &#8211;         Agorava OAuth 2.0 support doesn&#39;t follow rfc6749 (was Agorava doesn&#39;t support Empire Avenue)
      [AGOVA-31] &#8211;...
    </summary>
    <content type="html">
      &lt;p&gt;Agorava core version 0.6.0 just hit Maven Central, even if the release notes are quite short, there are a lot of big improvement in this release.&lt;/p&gt;
      &lt;h3&gt;Release notes&lt;/h3&gt;
      &lt;p&gt;First things first, here are the release notes.&lt;/p&gt;
      &lt;h4&gt;        Bug&lt;/h4&gt;
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-29&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-29&lt;/a&gt;] –         Tests fail with OpenWebBeans&lt;/li&gt;
      &lt;/ul&gt;
      
      &lt;h4&gt;        Enhancement&lt;/h4&gt;
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-23&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-23&lt;/a&gt;] –         Get Rid of JBoss Logging&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-30&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-30&lt;/a&gt;] –         Agorava OAuth 2.0 support doesn't follow rfc6749 (was Agorava doesn't support Empire Avenue)&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-31&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-31&lt;/a&gt;] –         Removing Generics to ease control of the framework&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;Quite terse isn’t it? Let’s focus on main points&lt;/p&gt;
      &lt;h3&gt;Stop using JBoss Solder Generics: a long story&lt;/h3&gt;
      &lt;p&gt;To ease creation of new modules and end user’s application configuration, Agorava integrated from the beginning a solution to automatically create some generics beans. This solution was based on JBoss &lt;a href=&quot;http://docs.jboss.org/seam/3/3.1.0.Final/reference/en-US/html/solder-genericbeans.html&quot;&gt;Solder Generic Beans&lt;/a&gt; extension. As you may know, Solder development was discontinued to be integrated in &lt;a href=&quot;http://deltaspike.apache.org&quot;&gt;Apache Deltaspike&lt;/a&gt;. I tried 3 times to have this Solder functionality integrated to Deltaspike, but hadn’t enough time and energy to convince Deltaspike tech leader that it could benefit to other &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; framework development projects.&lt;br&gt;
      The problem was that Agorava was using Generics and that it was no more supported. First decision was to get this code from Solder and put it in an Agorava module. So we created &lt;a href=&quot;https://github.com/agorava/agorava-utils&quot;&gt;Agorava-Utils&lt;/a&gt; (thanks to Ove Ranheim). In Agorava utils we put our own version of Solder Generics,but there were still issues with this solution, the main one being that Generics in Solder only worked with Weld.&lt;br&gt;
      So for his release, we decided to drop Generics and write our own extension system to automatically generate certain beans for each social media. Consequences of this redesign are a lighter code base to main and more important OpenWebBeans compatibility.&lt;/p&gt;
      &lt;h3&gt;OpenWebBeans support&lt;/h3&gt;
      &lt;p&gt;We added profile to test our code code against &lt;a href=&quot;http://openwebbeans.apache.org&quot;&gt;Apache OpenWebBeans&lt;/a&gt; 1.1.7+ (version used in &lt;a href=&quot;http://tomee.apache.org&quot;&gt;Apache TomEE&lt;/a&gt; 1.5.1) and made sure that Socializer:https://github.com/agorava/agorava-socializer (our demo application) perfomed well under TomEE.&lt;br&gt;
      Off course Agorava still supports &lt;a href=&quot;http://www.seamframework.org/Weld&quot;&gt;JBoss Weld&lt;/a&gt; 1.1.5+ (version present in &lt;a href=&quot;http://www.jboss.org/jbossas&quot;&gt;JBoss AS 7.1.1&lt;/a&gt;).&lt;br&gt;
      So now Agorava works on the 2 main &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; implementations.&lt;/p&gt;
      &lt;h3&gt;So long Solder, Hello Deltaspike&lt;/h3&gt;
      &lt;p&gt;Leaving JBoss Solder include leaving JBoss Logging. We now use &lt;span class=&quot;caps&quot;&gt;JUL&lt;/span&gt; as logging to continue reducing framework’s dependencies. Our new engine that replace Solder, makes use of Apache Deltaspike utility to register new beans when framework gets initialized. If you are interested to see how we use them, pay a visit to &lt;a href=&quot;https://github.com/agorava/agorava-core/blob/develop/agorava-core-impl-cdi/src/main/java/org/agorava/core/cdi/AgoravaExtension.java&quot;&gt;AgoravaExtension&lt;/a&gt;. I’ll probably write an article on this extension system.&lt;/p&gt;
      &lt;h3&gt;Modules simultaneous release&lt;/h3&gt;
      &lt;p&gt;For the first time, we also release simultaneously, Facebook, LinkedIn and Twitter module to 0.6.0 version. These release are there to provide modules supporting the new 0.6.0 &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;.&lt;/p&gt;
      &lt;h3&gt;A fresh documentation&lt;/h3&gt;
      &lt;p&gt;Finally, we updated the &lt;a href=&quot;http://agorava.org/doc/getting-started/&quot;&gt;getting started guide&lt;/a&gt; to add the simplification we introduced with this release. Other documentation will be deliver in the coming week, so stay tuned.&lt;/p&gt;
      &lt;h3&gt;What’s next ?&lt;/h3&gt;
      &lt;p&gt;Version 0.7.0 has started, we’re going to integrate our own OAuth engine to prepare migration to OAuth client framework and add support to Apache Camel to provide better integration solution (especially for Social Media providing Streaming &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;).&lt;br&gt;
      In the meantime go for :&lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.agorava&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;agorava-core-impl-cdi&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.6.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/pre&gt;
      &lt;p&gt;and give us your feedback&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://agorava.org/news/2013/06/16/Twitter-Facebook-and-Linkedin-modules-released.html</id>
    <title>Twitter, Facebook and LinkdedIn modules released in 0.5</title>
    <updated>2014-01-09T13:58:28+01:00</updated>
    <published>2013-06-16T00:00:00+00:00</published>
    <link href="http://agorava.org/news/2013/06/16/Twitter-Facebook-and-Linkedin-modules-released.html" rel="alternate" type="text/html" />
    <category term="Twitter"></category>
    <category term="Facebook"></category>
    <category term="LinkedIn"></category>
    <summary>
      This week-end we released version 0.5 of Twitter, Facebook and LinkedIn Agorava modules. They are now in Maven central
      End of a long SNAPSHOT
      These 3 modules were in SNAPSHOT mode for a long time. As people use them today in production and we are about to change (slightly) Agorava core
      API, we decided to release them to be sure that you won&#8217;t have trouble when core will be updated.
      How to grab them
      Right now they are only available in CDI implementation. You can get them with
      
        &lt;dependency&gt;
            &lt;groupId&gt;org.agorava&lt;/groupId&gt;
            &lt;artifactId&gt;agorava-twitter-cdi&lt;/artifactId&gt;
         ...
    </summary>
    <content type="html">
      &lt;p&gt;This week-end we released version 0.5 of Twitter, Facebook and LinkedIn Agorava modules. They are now in Maven central&lt;/p&gt;
      &lt;h3&gt;End of a long &lt;span class=&quot;caps&quot;&gt;SNAPSHOT&lt;/span&gt;
      &lt;/h3&gt;
      &lt;p&gt;These 3 modules were in &lt;span class=&quot;caps&quot;&gt;SNAPSHOT&lt;/span&gt; mode for a long time. As people use them today in production and we are about to change (slightly) Agorava core&lt;br&gt;
      &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;, we decided to release them to be sure that you won’t have trouble when core will be updated.&lt;/p&gt;
      &lt;h3&gt;How to grab them&lt;/h3&gt;
      &lt;p&gt;Right now they are only available in &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; implementation. You can get them with&lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.agorava&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;agorava-twitter-cdi&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.5.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/pre&gt;
      &lt;p&gt;or&lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.agorava&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;agorava-facebook-cdi&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.5.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/pre&gt;
      &lt;p&gt;or&lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.agorava&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;agorava-linkedin-cdi&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.5.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/pre&gt;
      &lt;p&gt;don’t forget to add Agorava core &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; to your project as well&lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.agorava&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;agorava-core-impl-cdi&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.5.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/pre&gt;
      &lt;h4&gt;What’s next?&lt;/h4&gt;
      &lt;p&gt;We’ll finish some &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; stabilization on Agorava Core, publish compatible modules and then work hard to provide up to date modules on these&lt;br&gt;
      major social network.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://agorava.org/news/2013/04/23/Agorava-0-5-2-release-and-roadmap.html</id>
    <title>Agorava 0.5.2 released. What's new and what's on the roadmap ?</title>
    <updated>2014-01-09T13:58:28+01:00</updated>
    <published>2013-04-23T00:00:00+00:00</published>
    <link href="http://agorava.org/news/2013/04/23/Agorava-0-5-2-release-and-roadmap.html" rel="alternate" type="text/html" />
    <category term="CDI"></category>
    <category term="OpenWebBeans"></category>
    <category term="Weld"></category>
    <category term="Solder"></category>
    <category term="roadmap"></category>
    <summary>
      
      Version 0.5.2 just hit Maven Central, what&#8217;s new in this release and what to expect in the coming months
      It&#8217;s been a long time
      We didn&#8217;t have much time lately to work on Agorava Core but that&#8217;s going to change in the coming month.
      On the module side, some initiative were started (among them stackoverflow, github, instagram&#8230;). We&#8217;ll post about them later.
      Release notes
      Since we didn&#8217;t gave an announcement for 0.5.X releases, you&#8217;ll find bellow a compilation of both release notes
      Release Notes &#8211; Agorava &#8211; Version 0.5.1 and 0.5.2
              Bug
      
      [AGOVA-25] &#8211;      ...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;img src=&quot;http://agorava.org/images/Compass-Vintage.png&quot; style=&quot;width:96px;&quot; class=&quot;left&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      &lt;p&gt;Version 0.5.2 just hit Maven Central, what’s new in this release and what to expect in the coming months&lt;/p&gt;
      &lt;h3&gt;It’s been a long time&lt;/h3&gt;
      &lt;p&gt;We didn’t have much time lately to work on Agorava Core but that’s going to change in the coming month.&lt;br&gt;
      On the module side, some initiative were started (among them stackoverflow, github, instagram…). We’ll post about them later.&lt;/p&gt;
      &lt;h3&gt;Release notes&lt;/h3&gt;
      &lt;p&gt;Since we didn’t gave an announcement for 0.5.X releases, you’ll find bellow a compilation of both release notes&lt;/p&gt;
      Release Notes – Agorava – Version 0.5.1 and 0.5.2
      &lt;h4&gt;        Bug&lt;/h4&gt;
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-25&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-25&lt;/a&gt;] –         Weld 1.1.9 and beyond not supported&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-14&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-14&lt;/a&gt;] –         SimpleOAuthAppSettingsBuilder doesn't work when callback url is an &lt;span class=&quot;caps&quot;&gt;SSL&lt;/span&gt; uri&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-19&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-19&lt;/a&gt;] –         Agora dependencies in dependency management uses dynamic project version&lt;/li&gt;
      &lt;/ul&gt;
      &lt;h4&gt;        Enhancement&lt;/h4&gt;
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-26&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-26&lt;/a&gt;] –         Add OpenWebBeans tests&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-15&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-15&lt;/a&gt;] –         Complicated to use Agorava without session scope&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-16&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-16&lt;/a&gt;] –         Annotation @OAuthApplication make params mandatory&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-17&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-17&lt;/a&gt;] –         Making PropertyOAuthAppSettingsBuilder as default builder for OAuthApplication&lt;/li&gt;
      &lt;/ul&gt;
      &lt;h4&gt;        Task&lt;/h4&gt;
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/AGOVA-27&quot;&gt;&lt;span class=&quot;caps&quot;&gt;AGOVA&lt;/span&gt;-27&lt;/a&gt;] –         Align Generics on solder last updates&lt;/li&gt;
      &lt;/ul&gt;
      &lt;h3&gt;What’s coming next in core ?&lt;/h3&gt;
      &lt;p&gt;We’re now actively working on &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; simplification and OpenWebBeans support in core. After that we’ll be working by integrating our own OAuth engine and provide a &lt;span class=&quot;caps&quot;&gt;JAX&lt;/span&gt;-RS implementation of it. You can follow the roadmap on our &lt;a href=&quot;http://issues.jboss.org/browse/AGOVA&quot;&gt;Jira instance&lt;/a&gt;&lt;/p&gt;
      &lt;h3&gt;What’s coming next in modules ?&lt;/h3&gt;
      &lt;p&gt;Our main modules (Twitter, Facebook, LinkedIn) are still in snapshot. We expect to release them during Q3 2013. Stay tuned and thanks for your patience&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://agorava.org/news/2012/07/10/Starting-a-CDI-webapp-from-Maven-with-Weld-servlet-and-jetty-plugin.html</id>
    <title>Starting a CDI webapp from Maven with Weld-Servlet and Jetty Plugin</title>
    <updated>2014-01-09T13:58:28+01:00</updated>
    <published>2012-07-10T00:00:00+00:00</published>
    <link href="http://agorava.org/news/2012/07/10/Starting-a-CDI-webapp-from-Maven-with-Weld-servlet-and-jetty-plugin.html" rel="alternate" type="text/html" />
    <category term="CDI"></category>
    <category term="Jetty"></category>
    <category term="Maven"></category>
    <category term="Socializer"></category>
    <summary>
      
      In Agorava framework we want to provide an easy way to launch our example applications. One of the easiest way is to provide a maven Goal that build the project and launch it with embedded Jetty servlet container. If you have read our previous post you already know that right now Agorava has only a CDI implementation. So when we created Socializer demo app we add to find a way to launch CDI container from Jetty Maven Plugin. This article is about how we did it.
      Launching CDI from Servlet Api
      The first problem to deal with is about launching CDI container...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;img src=&quot;http://agorava.org/images/weld.png&quot; style=&quot;width:80px;&quot; class=&quot;left&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      &lt;p&gt;In Agorava framework we want to provide an easy way to launch our example applications. One of the easiest way is to provide a maven Goal that build the project and launch it with embedded Jetty servlet container. If you have read our &lt;a href=&quot;http://agorava.org/news/2012/06/22/Meet-Agorava-the-Social-Framework&quot;&gt;previous post&lt;/a&gt; you already know that right now Agorava has only a &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; implementation. So when we created &lt;a href=&quot;http://socializer.agorava.cloudbees.net/home.jsf&quot;&gt;Socializer demo app&lt;/a&gt; we add to find a way to launch &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; container from Jetty Maven Plugin. This article is about how we did it.&lt;/p&gt;
      &lt;h3&gt;Launching &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; from Servlet Api&lt;/h3&gt;
      &lt;p&gt;The first problem to deal with is about launching &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; container from Servlet &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; is a Java EE 6 specification and thus comes in all Java EE container like JBoss, TomEE or Glassfish. However the specification doesn’t provide a standard way to launch &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; container outside Java EE. Each implementation brings its own solution (to be more precise OpenWebBeans and Weld bring a solution, Candi has no known way to be launch outside Resin). We decided to go with Weld because it’s the &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; RI and that it is the implementation on which Agorava was the more tested thru Glassfish and JBoss.&lt;/p&gt;
      &lt;h3&gt;Adding maven dependecies&lt;/h3&gt;
      &lt;p&gt;As we want to support Jetty but also full Java EE containers we added a profile in the pom.xml to keep the Java EE build clean. As this profile is supposed to build and run the project we call it &lt;code&gt;run&lt;/code&gt;. We add the following dependencies in the pom.xml&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;profile&amp;gt;
        &amp;lt;id&amp;gt;run&amp;lt;/id&amp;gt;
          &amp;lt;dependencies&amp;gt;
              &amp;lt;dependency&amp;gt;
                  &amp;lt;groupId&amp;gt;org.jboss.weld.servlet&amp;lt;/groupId&amp;gt;
                  &amp;lt;artifactId&amp;gt;weld-servlet&amp;lt;/artifactId&amp;gt;
                  &amp;lt;version&amp;gt;1.1.8.Final&amp;lt;/version&amp;gt;
                  &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
              &amp;lt;/dependency&amp;gt;
              &amp;lt;dependency&amp;gt;
                  &amp;lt;groupId&amp;gt;com.sun.faces&amp;lt;/groupId&amp;gt;
                  &amp;lt;artifactId&amp;gt;jsf-api&amp;lt;/artifactId&amp;gt;
                  &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;
              &amp;lt;/dependency&amp;gt;
              &amp;lt;dependency&amp;gt;
                  &amp;lt;groupId&amp;gt;com.sun.faces&amp;lt;/groupId&amp;gt;
                  &amp;lt;artifactId&amp;gt;jsf-impl&amp;lt;/artifactId&amp;gt;
                  &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;
              &amp;lt;/dependency&amp;gt;
          &amp;lt;/dependencies&amp;gt;
      &amp;lt;/profile&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Jsf dependencies are added because Socializer uses &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; and Jetty doesn’t provide thrm. The Jboss Weld Servlet is the important dependency here since it will provide bootstrapping for &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; thru servlet &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. It also will bring transitively all the needed dependencies for Weld core and &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;.&lt;/p&gt;
      &lt;h3&gt;Adding Jetty Maven plugin&lt;/h3&gt;
      &lt;p&gt;Now we can add the plugin to our new profile&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;build&amp;gt;
          &amp;lt;plugins&amp;gt;
             &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;8.1.3.v20120416&amp;lt;/version&amp;gt;
             &amp;lt;/plugin&amp;gt;
          &amp;lt;/plugins&amp;gt;
      &amp;lt;/build&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;This plugin allows to build a Maven project and launch Jetty directly from Maven with a simple &lt;code&gt;mvn jetty:run&lt;/code&gt; command.&lt;/p&gt;
      &lt;h3&gt;Boostraping &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt;
      &lt;/h3&gt;
      &lt;p&gt;To bootstrap &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt;, we have 2 steps to perform :&lt;/p&gt;
      &lt;h4&gt;Expose &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; bean manager thru &lt;span class=&quot;caps&quot;&gt;JNDI&lt;/span&gt;
      &lt;/h4&gt;
      &lt;p&gt;To do that we create a &lt;code&gt;jetty-env.xml&lt;/code&gt; file in &lt;span class=&quot;caps&quot;&gt;WEB&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;INF&lt;/span&gt; containing this&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;!DOCTYPE Configure PUBLIC &quot;-//Mort Bay Consulting//DTD Configure//EN&quot; &quot;http://www.eclipse.org/jetty/configure.dtd&quot;&amp;gt;
      &amp;lt;Configure id=&quot;webAppCtx&quot; class=&quot;org.eclipse.jetty.webapp.WebAppContext&quot;&amp;gt;
          &amp;lt;New id=&quot;BeanManager&quot; class=&quot;org.eclipse.jetty.plus.jndi.Resource&quot;&amp;gt;
              &amp;lt;Arg&amp;gt;
                  &amp;lt;Ref id=&quot;webAppCtx&quot;/&amp;gt;
              &amp;lt;/Arg&amp;gt;
              &amp;lt;Arg&amp;gt;BeanManager&amp;lt;/Arg&amp;gt;
              &amp;lt;Arg&amp;gt;
                  &amp;lt;New class=&quot;javax.naming.Reference&quot;&amp;gt;
                      &amp;lt;Arg&amp;gt;javax.enterprise.inject.spi.BeanManager&amp;lt;/Arg&amp;gt;
                      &amp;lt;Arg&amp;gt;org.jboss.weld.resources.ManagerObjectFactory&amp;lt;/Arg&amp;gt;
                      &amp;lt;Arg/&amp;gt;
                  &amp;lt;/New&amp;gt;
              &amp;lt;/Arg&amp;gt;
          &amp;lt;/New&amp;gt;
      &amp;lt;/Configure&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;This file is a standard Jetty config file and is run by the container at boot time.&lt;/p&gt;
      &lt;h4&gt;Adding Web.xml configuration&lt;/h4&gt;
      &lt;p&gt;To achieve the bootstrapping we also need to add two entries to &lt;code&gt;web.xml&lt;/code&gt; :&lt;/p&gt;
      &lt;ul&gt;
      	&lt;li&gt;One to retrieve the BeanManager exposed in the file above and expose it to servlet &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;
      &lt;/li&gt;
      	&lt;li&gt;One to launch the servlet listener that will boot &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; container&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;As we don’t want to pollute existing web.xml which works perfectly for Java EE 6 containers, we add a web.xml overriding file to add our entries. This file is declared in Jetty plugin configuration like this&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;plugin&amp;gt;
          &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;8.1.3.v20120416&amp;lt;/version&amp;gt;
          &amp;lt;configuration&amp;gt;
              &amp;lt;webApp&amp;gt;
                  &amp;lt;overrideDescriptor&amp;gt;src/main/webapp/WEB-INF/web-add.xml&amp;lt;/overrideDescriptor&amp;gt;
              &amp;lt;/webApp&amp;gt;
          &amp;lt;/configuration&amp;gt;
      &amp;lt;/plugin&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;The content of web-add.xml file is as follow&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;web-app version=&quot;3.0&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
               xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;&amp;gt;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;    &amp;lt;listener&amp;gt;
              &amp;lt;listener-class&amp;gt;org.jboss.weld.environment.servlet.Listener&amp;lt;/listener-class&amp;gt;
          &amp;lt;/listener&amp;gt;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;    &amp;lt;resource-env-ref&amp;gt;
              &amp;lt;resource-env-ref-name&amp;gt;BeanManager&amp;lt;/resource-env-ref-name&amp;gt;
              &amp;lt;resource-env-ref-type&amp;gt;
                  javax.enterprise.inject.spi.BeanManager
              &amp;lt;/resource-env-ref-type&amp;gt;
          &amp;lt;/resource-env-ref&amp;gt;
      &amp;lt;/web-app&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;It’s content will override web.xml one (i.e web.xml will be interpreted before web-add.xml).&lt;/p&gt;
      &lt;h3&gt;Last trick to allow injection in servlets&lt;/h3&gt;
      &lt;p&gt;Weld Servlet will try to decorate some Jetty internal class to add the possibility of using &lt;code&gt;@Inject&lt;/code&gt; inside servlets. This class is a Jetty system class and therefore is not visible from the web application. We have to tell Jetty classloader to expose this class to the web app in order to have Weld Servlet decorating it.&lt;br&gt;
      To allow this we create a &lt;code&gt;jetty-context.xml&lt;/code&gt; file in &lt;span class=&quot;caps&quot;&gt;WEB&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;INF&lt;/span&gt;&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;!DOCTYPE Configure PUBLIC &quot;-//Jetty//Configure//EN&quot; &quot;http://www.eclipse.org/jetty/configure.dtd&quot;&amp;gt;
      &amp;lt;Configure class=&quot;org.eclipse.jetty.webapp.WebAppContext&quot;&amp;gt;
          &amp;lt;Set name=&quot;serverClasses&quot;&amp;gt;
              &amp;lt;Array type=&quot;java.lang.String&quot;&amp;gt;
                  &amp;lt;Item&amp;gt;-org.eclipse.jetty.servlet.ServletContextHandler.Decorator&amp;lt;/Item&amp;gt;
              &amp;lt;/Array&amp;gt;
          &amp;lt;/Set&amp;gt;
      &amp;lt;/Configure&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Then we add it to Jetty Maven plugin configuration like this&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;configuration&amp;gt;
          &amp;lt;webApp&amp;gt;
              &amp;lt;overrideDescriptor&amp;gt;src/main/webapp/WEB-INF/web-add.xml&amp;lt;/overrideDescriptor&amp;gt;
          &amp;lt;/webApp&amp;gt;
          &amp;lt;contextXml&amp;gt;src/main/webapp/WEB-INF/jetty-context.xml&amp;lt;/contextXml&amp;gt;
      &amp;lt;/configuration&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Then we’re done&lt;/p&gt;
      &lt;h3&gt;To sum up&lt;/h3&gt;
      &lt;p&gt;Here is the complete &lt;code&gt;run&lt;/code&gt; Profile in our &lt;code&gt;pom.xml&lt;/code&gt; file&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;profile&amp;gt;
          &amp;lt;id&amp;gt;run&amp;lt;/id&amp;gt;
          &amp;lt;dependencies&amp;gt;
              &amp;lt;dependency&amp;gt;
                  &amp;lt;groupId&amp;gt;org.jboss.weld.servlet&amp;lt;/groupId&amp;gt;
                  &amp;lt;artifactId&amp;gt;weld-servlet&amp;lt;/artifactId&amp;gt;
                  &amp;lt;version&amp;gt;1.1.8.Final&amp;lt;/version&amp;gt;
                  &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
              &amp;lt;/dependency&amp;gt;
              &amp;lt;dependency&amp;gt;
                  &amp;lt;groupId&amp;gt;com.sun.faces&amp;lt;/groupId&amp;gt;
                  &amp;lt;artifactId&amp;gt;jsf-api&amp;lt;/artifactId&amp;gt;
                  &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;
              &amp;lt;/dependency&amp;gt;
              &amp;lt;dependency&amp;gt;
                  &amp;lt;groupId&amp;gt;com.sun.faces&amp;lt;/groupId&amp;gt;
                  &amp;lt;artifactId&amp;gt;jsf-impl&amp;lt;/artifactId&amp;gt;
                  &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;
              &amp;lt;/dependency&amp;gt;
          &amp;lt;/dependencies&amp;gt;
          &amp;lt;build&amp;gt;
              &amp;lt;defaultGoal&amp;gt;clean jetty:run&amp;lt;/defaultGoal&amp;gt;
              &amp;lt;plugins&amp;gt;
                  &amp;lt;plugin&amp;gt;
                      &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;
                      &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt;
                      &amp;lt;version&amp;gt;8.1.3.v20120416&amp;lt;/version&amp;gt;
                      &amp;lt;configuration&amp;gt;
                          &amp;lt;webApp&amp;gt;
                              &amp;lt;overrideDescriptor&amp;gt;src/main/webapp/WEB-INF/web-add.xml&amp;lt;/overrideDescriptor&amp;gt;
                          &amp;lt;/webApp&amp;gt;
                          &amp;lt;contextXml&amp;gt;src/main/webapp/WEB-INF/jetty-context.xml&amp;lt;/contextXml&amp;gt;
                      &amp;lt;/configuration&amp;gt;
                  &amp;lt;/plugin&amp;gt;
              &amp;lt;/plugins&amp;gt;
          &amp;lt;/build&amp;gt;
      &amp;lt;/profile&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Don’t forget the 3 files above &lt;code&gt;jetty-env.xml&lt;/code&gt; to define &lt;span class=&quot;caps&quot;&gt;JNDI&lt;/span&gt;, &lt;code&gt;web-add.xml&lt;/code&gt; to override web.xml with &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; servlet bootstrapping and &lt;span class=&quot;caps&quot;&gt;JNDI&lt;/span&gt; and &lt;code&gt;jetty-context.xml&lt;/code&gt; to expose the internal servlet implementation for Weld decorator.&lt;br&gt;
      With this Maven profile, we only have to enter &lt;code&gt;mvn -Prun&lt;/code&gt; to build our web application and have it launched in Jetty to test it. Hard to make it simpler.&lt;/p&gt;
      &lt;h3&gt;Check our code&lt;/h3&gt;
      &lt;p&gt;Feel free to look at &lt;a href=&quot;http://github.com/agorava/agorava-socializer&quot;&gt;Socializer code&lt;/a&gt; and play with our &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. Contribution are always welcome.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://agorava.org/news/2012/06/22/Meet-Agorava-the-Social-Framework.html</id>
    <title>Meet Agorava, The Social Framework</title>
    <updated>2014-01-09T13:58:28+01:00</updated>
    <published>2012-06-22T00:00:00+00:00</published>
    <link href="http://agorava.org/news/2012/06/22/Meet-Agorava-the-Social-Framework.html" rel="alternate" type="text/html" />
    <category term="announce"></category>
    <category term="Socializer"></category>
    <category term="roadmap"></category>
    <summary>
      
      Did you ever looked for a nice solution in java to authenticate your users with their Twitter, Facebook or LinkedIn account ? Have you ever looked for a nice way to post tweets or Facebook updates from your Java application? Do you need to read your timeline or perform a search on a Social Media services from Java EE web application? If you answered yes to one of these questions Agorava is (or will be soon) the right answer to your needs.
      Agorava is the missing framework to deal with Social Media based on OAuth 1.0a and OAuth 2.0. It provides...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;img src=&quot;http://agorava.org/images/logo.png&quot; class=&quot;left&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      &lt;p&gt;Did you ever looked for a nice solution in java to authenticate your users with their Twitter, Facebook or LinkedIn account ? Have you ever looked for a nice way to post tweets or Facebook updates from your Java application? Do you need to read your timeline or perform a search on a Social Media services from Java EE web application? If you answered yes to one of these questions Agorava is (or will be soon) the right answer to your needs.&lt;br&gt;
      Agorava is the missing framework to deal with Social Media based on OAuth 1.0a and OAuth 2.0. It provides a way to authenticate on Social Media, use APIs and map &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; answers to Java pojo. It’ll have multiple implementations (like &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt;, Java SE, &lt;span class=&quot;caps&quot;&gt;JSR&lt;/span&gt; 330 supporting framework and others) to support your needs. Right now the only implementation is based on &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; but we’ll provide others in the coming months.&lt;/p&gt;
      &lt;h3&gt;Agorava genesis&lt;/h3&gt;
      &lt;p&gt;Agorava’s short history is important because it helps to understand the goals of our team. In March 2011 the project Seam Social was launched. This project was a collection of &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; beans and extension to support Social Network consuming. It lived inside Seam 3 project which was an ambitious JBoss project aimed to provide a rich ecosystem for Java EE 6 thru &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; extensions. For all kind of reasons we won’t develop here, Seam 3 project was stopped at the end of 2011 to create a new project around &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; ecosystem : &lt;a href=&quot;https://cwiki.apache.org/confluence/display/DeltaSpike/Temporary+Documentation&quot;&gt;Apache Deltaspike&lt;/a&gt; (merging Seam 3, Apache &lt;span class=&quot;caps&quot;&gt;CODI&lt;/span&gt; and others initiatives).&lt;br&gt;
      In parallel of this event, a few people launched a &lt;span class=&quot;caps&quot;&gt;JCP&lt;/span&gt; proposal on Social Media : &lt;a href=&quot;http://jcp.org/en/jsr/detail?id=357&quot;&gt;Java Social &lt;span class=&quot;caps&quot;&gt;JSR&lt;/span&gt; 357&lt;/a&gt;. Projects like Seam Social or &lt;a href=&quot;http://java.net/projects/dalicore&quot;&gt;DaliCore&lt;/a&gt; were main influencers for this proposal. This proposal was voted down for all kind of reasons, but mainly because there wasn’t a real proof of concept (an implementation) behind it.&lt;br&gt;
      So the conjunction of these 2 stories brought us to create a new project : start from Seam Social code to provide an implementation for Java Social with the goal to go back to &lt;span class=&quot;caps&quot;&gt;JCP&lt;/span&gt; in the future. This project is also a experiment to answer the problem and challenges in creating a standard &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for Social Media &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for Java platform. Thus Agorava is born&lt;/p&gt;
      &lt;h3&gt;But most Social Media already have their own APIs. So why do we reinvent the wheel?&lt;/h3&gt;
      &lt;p&gt;Yes it’s true, but these social APIs are almost always in Javascript only and if it’s available in Java,  mostly its created by a third part or its build for one or few particular Social Media. So they are ok if you want to deal with &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; or simple manipulation. If you need to extend functionalities (crawl Twitter followers for instance or perform full text search on your Facebook Timeline) or build a mashup between different services those JS &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; would show their limit quickly.&lt;br&gt;
      Having a vendor free solution to deal with these Services is also an advantage, we’ll try to implement all the available public APIs and provide similar functionalities across “all Social Media”.&lt;/p&gt;
      &lt;h3&gt;Agorava is already alive and active!&lt;/h3&gt;
      &lt;p&gt;Agorava can be used right now. You can test our demo application &lt;a href=&quot;http://socializer.agorava.cloudbees.net/&quot;&gt;Socializer&lt;/a&gt; or fork the &lt;a href=&quot;https://github.com/agorava/agorava-socializer&quot;&gt;Socializer project on Github&lt;/a&gt; and run it with a simple &lt;code&gt;mvn -Prun&lt;/code&gt;.&lt;br&gt;
      You already have some documentation on our &lt;a href=&quot;https://docs.jboss.org/author/display/AGOVA&quot;&gt;wiki&lt;/a&gt; to start hacking our code so feel free to try it!&lt;br&gt;
      Agorava project is live and growing day by day! It also have &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!forum/agorava-dev&quot;&gt;User Group&lt;/a&gt; for anyone like to post doubts or know the progress of the project&lt;/p&gt;
      &lt;h3&gt;Project roadmap&lt;/h3&gt;
      &lt;p&gt;Right now we’re aiming a 0.5.0 release (the 0.5.0 &lt;span class=&quot;caps&quot;&gt;SNAPSHOT&lt;/span&gt; is fully functional) during the summer. This version will be focused on &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; implementation only. Main objective of 0.5.0 are:&lt;/p&gt;
      &lt;ul&gt;
      	&lt;li&gt;Support stateless architecture (right now an http session is needed to store user Oauth Tokens)&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;Normally (except if people are ready to contribute and are not afraid of refactoring for version 1.0.0), we won’t work on existing modules (Twitter, Facebook, LinkedIn) since &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; could change in version 1.0.0 when we’ll integrate &lt;span class=&quot;caps&quot;&gt;JAX&lt;/span&gt;-RS client framework.&lt;/p&gt;
      &lt;p&gt;Objective for 1.0.0 are:&lt;/p&gt;
      &lt;ul&gt;
      	&lt;li&gt;Change &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; engine for &lt;span class=&quot;caps&quot;&gt;JAX&lt;/span&gt;-RS 2.0 client framework&lt;/li&gt;
      	&lt;li&gt;If necessary implement our own OAuth implementation on &lt;span class=&quot;caps&quot;&gt;JAX&lt;/span&gt;-RS client Framework&lt;/li&gt;
      	&lt;li&gt;Provide compatibility with Weld-OSGi&lt;/li&gt;
      	&lt;li&gt;Java SE implementation&lt;/li&gt;
      	&lt;li&gt;
      &lt;span class=&quot;caps&quot;&gt;JSR&lt;/span&gt; 330 specific &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; and implementation (Guice or Spring)&lt;/li&gt;
      	&lt;li&gt;Finished Twitter, LinkedIn, Facebook Modules&lt;/li&gt;
      	&lt;li&gt;New modules?&lt;/li&gt;
      &lt;/ul&gt;
      &lt;h3&gt;If you want to contribute?&lt;/h3&gt;
      &lt;p&gt;Of course we need contributors to help us to make Agorava a better Social Media &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for Java platform.&lt;/p&gt;
      &lt;p&gt;To contribute to, help or just follow the project you can:&lt;/p&gt;
      &lt;ul&gt;
      	&lt;li&gt;join us on our &lt;a href=&quot;http://groups.google.com/group/agorava-dev&quot;&gt;Google Group&lt;/a&gt;
      &lt;/li&gt;
      	&lt;li&gt;Subscribe to our mailing list (same content as Group) by sending an empty mail to &lt;a href=&quot;mailto:agorava-dev+subscribe@googlegroups.com&quot;&gt;agorava-dev+subscribe@googlegroups.com&lt;/a&gt;
      &lt;/li&gt;
      	&lt;li&gt;join us on &lt;span class=&quot;caps&quot;&gt;IRC&lt;/span&gt; on &lt;code&gt;chat.freenode.net&lt;/code&gt; channel &lt;code&gt;#agorava&lt;/code&gt;
      &lt;/li&gt;
      	&lt;li&gt;post your issues, enhancement wishes or ideas on our &lt;a href=&quot;https://issues.jboss.org/browse/AGOVA&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt;&lt;/a&gt;
      &lt;/li&gt;
      	&lt;li&gt;fork our project and send pull requests on &lt;a href=&quot;https://github.com/agorava&quot;&gt;Github&lt;/a&gt;
      &lt;/li&gt;
      	&lt;li&gt;follow us on Twitter &lt;a href=&quot;http://twitter.com/agoravaproj&quot;&gt;@agoravaproj&lt;/a&gt;
      &lt;/li&gt;
      	&lt;li&gt;spread the word…&lt;/li&gt;
      &lt;/ul&gt;
      &lt;h3&gt;Project Sponsors&lt;/h3&gt;
      &lt;p&gt;On this road we are not alone. Organizations help us every day to make Agorava a reality and a success. So we’d like to thanks :&lt;/p&gt;
      &lt;ul&gt;
      	&lt;li&gt;
      &lt;a href=&quot;http://blog.ippon.fr&quot;&gt;Ippon Technologies&lt;/a&gt; (my employer) a French Consulting company that agreed for giving me time to work on Seam Social and now on Agorava&lt;/li&gt;
      	&lt;li&gt;JBoss (Red Hat) who hosted Seam Social and helped Agorava launch and continue to support us every day with Jira, Confluence and good advice. Special thanks to Jason, Pete, Lincoln and Dan.&lt;/li&gt;
      	&lt;li&gt;The &lt;span class=&quot;caps&quot;&gt;JCP&lt;/span&gt;. Ok they voted down our &lt;span class=&quot;caps&quot;&gt;JSR&lt;/span&gt; proposal but most of their critics were helpful and lead us to start Agorava. We’ll get back to them soon.&lt;/li&gt;
      	&lt;li&gt;Spring Source. Spring Social was the inspirer of Seam Social. I also borrowed a lot of code from Spring Social for Twitter, LinkedIn and Facebook connectors. Thank you guys.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;h3&gt;Follow us&lt;/h3&gt;
      &lt;p&gt;If you like to keep track of the progress of Agorava following links help you&lt;/p&gt;
      &lt;ul&gt;
      	&lt;li&gt;Website: &lt;a href=&quot;http://agorava.org&quot;&gt;http://agorava.org&lt;/a&gt;
      &lt;/li&gt;
      	&lt;li&gt;Twitter : &lt;a href=&quot;http://twitter.com/AgoravaProj&quot;&gt;@Agoravaproj&lt;/a&gt;
      &lt;/li&gt;
      	&lt;li&gt;User Group: &lt;a href=&quot;http://groups.google.com/group/agorava-dev&quot;&gt;http://groups.google.com/group/agorava-dev&lt;/a&gt;
      &lt;/li&gt;
      	&lt;li&gt;GitHub: &lt;a href=&quot;https://github.com/agorava&quot;&gt;https://github.com/agorava&lt;/a&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;See you soon!&lt;/p&gt;
    </content>
  </entry>
</feed>
